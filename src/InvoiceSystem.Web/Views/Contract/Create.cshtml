@model InvoiceSystem.Domain.DTOs.CreateContractDto
@{
    ViewData["Title"] = "Create Contract";
}

<div class="container mt-4">
    <div class="row">
        <div class="col-md-8 offset-md-2">
            <h2>Create New Contract</h2>
            <hr />
            <div class="alert alert-info">
                <p>Contract start date must be before end date</p>
                <p>Contracts can only be created within a 5-year range from today</p>
            </div>
            <form asp-action="Create" method="post" id="contractForm">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                <div class="form-group mb-3">
                    <label asp-for="EmployeeId" class="control-label">Employee</label>
                    <select asp-for="EmployeeId" asp-items="ViewBag.Employees" class="form-control">
                        <option value="">-- Select Employee --</option>
                    </select>
                    <span asp-validation-for="EmployeeId" class="text-danger"></span>
                </div>

                <div class="form-group mb-3">
                    <label asp-for="ContractType" class="control-label">Contract Type</label>
                    <select asp-for="ContractType" asp-items="ViewBag.ContractTypes" class="form-control">
                        <option value="">-- Select Contract Type --</option>
                    </select>
                    <span asp-validation-for="ContractType" class="text-danger"></span>
                </div>

                <div class="form-group mb-3">
                    <label asp-for="PayGrade" class="control-label">Pay Grade</label>
                    <select asp-for="PayGrade" asp-items="ViewBag.PayGrades" class="form-control">
                        <option value="">-- Select Pay Grade --</option>
                    </select>
                    <span asp-validation-for="PayGrade" class="text-danger"></span>
                </div>

                <div class="form-group mb-3">
                    <label asp-for="DailyRate" class="control-label">Daily Rate</label>
                    <input asp-for="DailyRate" class="form-control" type="number" step="0.01" min="0" />
                    <span asp-validation-for="DailyRate" class="text-danger"></span>
                </div>

                <div class="form-group mb-3">
                    <label asp-for="StartDate" class="control-label">Start Date</label>
                    <input asp-for="StartDate" class="form-control" type="date" id="startDate" />
                    <span asp-validation-for="StartDate" class="text-danger"></span>
                </div>

                <div class="form-group mb-3">
                    <label asp-for="EndDate" class="control-label">End Date</label>
                    <input asp-for="EndDate" class="form-control" type="date" id="endDate" />
                    <span asp-validation-for="EndDate" class="text-danger"></span>
                </div>

                <div class="form-group mb-3">
                    <input type="submit" value="Create" class="btn btn-primary" />
                    <a asp-action="Index" class="btn btn-secondary">Back to List</a>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const startDateInput = document.getElementById('startDate');
            const endDateInput = document.getElementById('endDate');
            const contractForm = document.getElementById('contractForm');

            // Set date restrictions (5 years range)
            const today = new Date();
            const minDate = new Date(today.getFullYear() - 1, today.getMonth(), today.getDate()).toISOString().split('T')[0];
            const maxDate = new Date(today.getFullYear() + 4, today.getMonth(), today.getDate()).toISOString().split('T')[0];

            // Set min/max attributes for both date inputs
            startDateInput.min = minDate;
            startDateInput.max = maxDate;
            endDateInput.min = minDate;
            endDateInput.max = maxDate;

            // Update end date min value when start date changes
            startDateInput.addEventListener('change', function() {
                endDateInput.min = startDateInput.value;
                if (endDateInput.value && endDateInput.value < startDateInput.value) {
                    endDateInput.value = startDateInput.value;
                }
            });

            // Update start date max value when end date changes
            endDateInput.addEventListener('change', function() {
                if (startDateInput.value && startDateInput.value > endDateInput.value) {
                    startDateInput.value = endDateInput.value;
                }
            });

            // Form validation
            contractForm.addEventListener('submit', function(event) {
                const startDate = new Date(startDateInput.value);
                const endDate = new Date(endDateInput.value);

                if (startDate > endDate) {
                    event.preventDefault();
                    alert('Contract start date must be before end date');
                    return false;
                }

                if (startDate < new Date(minDate) || endDate > new Date(maxDate)) {
                    event.preventDefault();
                    alert('Contract dates must be within 5 years from today');
                    return false;
                }
            });
        });
    </script>
} 